"use strict";

var Comment = React.createClass({
    displayName: "Comment",

    rawMarkup: function rawMarkup() {
        var rawMarkup = marked(marked(this.props.children.toString(), { sanitize: true }));
        //sanitize: true 过滤HTML语法, 然而不是标签过滤
        return { __html: rawMarkup };
    },

    render: function render() {
        return React.createElement(
            "div",
            { className: "comment" },
            React.createElement(
                "h2",
                { className: "commentAuthor text-info" },
                this.props.author
            ),
            React.createElement("span", { dangerouslySetInnerHTML: this.rawMarkup() })
        );
    }
});
'use strict';

var CommentBox = React.createClass({
    displayName: 'CommentBox',

    loadCommentsFromServer: function loadCommentsFromServer() {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: (function (data) {
                this.setState({ data: data });
            }).bind(this),
            error: (function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }).bind(this)
        });
    },
    handleCommentSubmit: function handleCommentSubmit(comment) {
        var comments = this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id = Date.now();
        var newComments = comments.concat([comment]);
        this.setState({ data: newComments });

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data: comment,
            success: (function (data) {
                this.setState({ data: data });
            }).bind(this),
            error: (function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }).bind(this)

        });
    },
    getInitialState: function getInitialState() {
        return { data: [] };
    },
    componentDidMount: function componentDidMount() {
        this.loadCommentsFromServer();

        // the reason why there is just a function name
        // instead of a function call ('function()') is that
        // the first parameter passed to 'setInterval()'
        // should be a function not a function call.
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: 'commentBox' },
            React.createElement(CommentForm, { onCommentSubmit: this.handleCommentSubmit }),
            React.createElement(
                'h1',
                null,
                React.createElement(
                    'span',
                    { className: 'center-block text-center' },
                    'Comments'
                )
            ),
            React.createElement(CommentList, { data: this.state.data })
        );
    }
});
'use strict';

var CommentForm = React.createClass({
    displayName: 'CommentForm',

    getInitialState: function getInitialState() {
        return { author: '', text: '' };
    },
    handleAuthorChange: function handleAuthorChange(e) {
        this.setState({ author: e.target.value });
    },
    handleTextChange: function handleTextChange(e) {
        this.setState({ text: e.target.value });
    },
    handleSubmit: function handleSubmit(e) {
        e.preventDefault();
        var author = this.state.author.trim();
        var text = this.state.text.trim();
        if (!text || !author) {
            return;
        }

        this.props.onCommentSubmit({ author: author, text: text });

        this.setState({ author: '', text: '' });
    },
    render: function render() {
        return React.createElement(
            'div',
            { className: 'commentForm form-control-static' },
            React.createElement(
                'form',
                { className: 'commentForm', onSubmit: this.handleSubmit },
                React.createElement('input', { type: 'text',
                    className: 'form-group form-control ',
                    value: this.state.author,
                    onChange: this.handleAuthorChange,
                    placeholder: 'Your name' }),
                React.createElement('input', { type: 'text',
                    className: 'form-group form-control ',
                    onChange: this.handleTextChange,
                    value: this.state.text,
                    placeholder: 'Say something' }),
                React.createElement('input', { type: 'submit', className: 'form-control btn btn-success', value: 'Post' })
            )
        );
    }

});
"use strict";

var CommentList = React.createClass({
    displayName: "CommentList",

    render: function render() {
        var commentNodes = this.props.data.reverse().map(function (comment) {
            return React.createElement(
                "div",
                { key: comment.id },
                React.createElement(
                    Comment,
                    { author: comment.author },
                    comment.text
                ),
                React.createElement("hr", null)
            );
        });

        return React.createElement(
            "div",
            { className: "commentList" },
            commentNodes
        );
    }
});
