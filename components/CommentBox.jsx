
var CommentBox = React.createClass({
    loadCommentsFromServer: function () {
        $.ajax({
            url: this.props.url,
            dataType: 'json',
            cache: false,
            success: function (data) {
                this.setState({data: data});

            }.bind(this),
            error: function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });

    },
    handleCommentSubmit: function(comment){
        var comments=this.state.data;
        // Optimistically set an id on the new comment. It will be replaced by an
        // id generated by the server. In a production application you would likely
        // not use Date.now() for this and would have a more robust system in place.
        comment.id=Date.now();
        var newComments = comments.concat([comment]);
        this.setState({data: newComments});

        $.ajax({
            url: this.props.url,
            dataType: 'json',
            type: 'POST',
            data : comment,
            success : function(data){
                this.setState({data:data});
            }.bind(this),
            error: function(xhr,status,err){
                console.error(this.props.url, status, err.toString());
            }.bind(this)



        });

    },
    getInitialState: function () {
        return {data: []};
    },
    componentDidMount(){
        this.loadCommentsFromServer();

        // the reason why there is just a function name
        // instead of a function call ('function()') is that
        // the first parameter passed to 'setInterval()'
        // should be a function not a function call.
        setInterval(this.loadCommentsFromServer, this.props.pollInterval);
    },
    render: function () {
        return (
            <div className="commentBox">
                <CommentForm onCommentSubmit={this.handleCommentSubmit} />
                <h1><span className="center-block text-center">Comments</span></h1>
                <CommentList data={this.state.data}/>
            </div>
        );
    }
});
